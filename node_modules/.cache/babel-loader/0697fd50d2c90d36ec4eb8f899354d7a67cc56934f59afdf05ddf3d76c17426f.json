{"ast":null,"code":"var _jsxFileName = \"/Users/swapnil/weather-app-swapnil/src/components/search/search.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\nimport ipapi from \"ipapi.co\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Search = _ref => {\n  _s();\n  let {\n    onSearchChange\n  } = _ref;\n  const [search, setSearch] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n  useEffect(() => {\n    ipapi.location(location => {\n      setUserLocation({\n        value: `${location.latitude} ${location.longitude}`,\n        label: `${location.city}, ${location.country}`\n      });\n    });\n  }, []);\n  const loadOptions = inputValue => {\n    return fetch(`${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`, geoApiOptions).then(response => response.json()).then(response => {\n      return {\n        options: response.data.map(city => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`\n          };\n        })\n      };\n    });\n  };\n  const handleOnChange = searchData => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n  return /*#__PURE__*/_jsxDEV(AsyncPaginate, {\n    placeholder: \"Search for a city or country\",\n    debounceTimeout: 600,\n    value: search,\n    value: search || userLocation // set userLocation as the default value\n    ,\n\n    onChange: handleOnChange,\n    loadOptions: loadOptions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Search, \"Vs2h457MvMGq1zbMK53x8LFXshc=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","AsyncPaginate","geoApiOptions","GEO_API_URL","ipapi","jsxDEV","_jsxDEV","Search","_ref","_s","onSearchChange","search","setSearch","userLocation","setUserLocation","useEffect","location","value","latitude","longitude","label","city","country","loadOptions","inputValue","fetch","then","response","json","options","data","map","name","countryCode","handleOnChange","searchData","placeholder","debounceTimeout","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/swapnil/weather-app-swapnil/src/components/search/search.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { geoApiOptions, GEO_API_URL } from \"../../api\";\nimport ipapi from \"ipapi.co\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n  const [userLocation, setUserLocation] = useState(null);\n\n  useEffect(() => {\n    ipapi.location((location) => {\n      setUserLocation({\n        value: `${location.latitude} ${location.longitude}`,\n        label: `${location.city}, ${location.country}`,\n      });\n    });\n  }, []);\n\n\n  const loadOptions = (inputValue) => {\n    return fetch(\n      `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${inputValue}`,\n      geoApiOptions\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        return {\n          options: response.data.map((city) => {\n            return {\n              value: `${city.latitude} ${city.longitude}`,\n              label: `${city.name}, ${city.countryCode}`,\n            };\n          }),\n        };\n      });\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for a city or country\"\n      debounceTimeout={600}\n      value={search}\n            value={search || userLocation} // set userLocation as the default value\n\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,aAAa,EAAEC,WAAW,QAAQ,WAAW;AACtD,OAAOC,KAAK,MAAM,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,MAAM,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC;EAAe,CAAC,GAAAF,IAAA;EAChC,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEtDe,SAAS,CAAC,MAAM;IACdX,KAAK,CAACY,QAAQ,CAAEA,QAAQ,IAAK;MAC3BF,eAAe,CAAC;QACdG,KAAK,EAAG,GAAED,QAAQ,CAACE,QAAS,IAAGF,QAAQ,CAACG,SAAU,EAAC;QACnDC,KAAK,EAAG,GAAEJ,QAAQ,CAACK,IAAK,KAAIL,QAAQ,CAACM,OAAQ;MAC/C,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMC,WAAW,GAAIC,UAAU,IAAK;IAClC,OAAOC,KAAK,CACT,GAAEtB,WAAY,4CAA2CqB,UAAW,EAAC,EACtEtB,aAAa,CACd,CACEwB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEC,QAAQ,IAAK;MAClB,OAAO;QACLE,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC,GAAG,CAAEV,IAAI,IAAK;UACnC,OAAO;YACLJ,KAAK,EAAG,GAAEI,IAAI,CAACH,QAAS,IAAGG,IAAI,CAACF,SAAU,EAAC;YAC3CC,KAAK,EAAG,GAAEC,IAAI,CAACW,IAAK,KAAIX,IAAI,CAACY,WAAY;UAC3C,CAAC;QACH,CAAC;MACH,CAAC;IACH,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,cAAc,GAAIC,UAAU,IAAK;IACrCvB,SAAS,CAACuB,UAAU,CAAC;IACrBzB,cAAc,CAACyB,UAAU,CAAC;EAC5B,CAAC;EAED,oBACE7B,OAAA,CAACL,aAAa;IACZmC,WAAW,EAAC,8BAA8B;IAC1CC,eAAe,EAAE,GAAI;IACrBpB,KAAK,EAAEN,MAAO;IACRM,KAAK,EAAEN,MAAM,IAAIE,YAAa,CAAC;IAAA;;IAErCyB,QAAQ,EAAEJ,cAAe;IACzBX,WAAW,EAAEA;EAAY;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACzB;AAEN,CAAC;AAACjC,EAAA,CAhDIF,MAAM;AAAAoC,EAAA,GAANpC,MAAM;AAkDZ,eAAeA,MAAM;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}