{"ast":null,"code":"var _jsxFileName = \"/Users/swapnil/weather-app-swapnil/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor';\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n//import sunrise from \"./sunrise.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  var currentTime = new Date().getHours();\n  if (8 <= currentTime && currentTime < 12) {\n    setBodyColor(\"#FF2CAA 0%\", \"#ffff01 100%\");\n  } else if (12 <= currentTime && currentTime < 19) {\n    setBodyColor(\"#89CFF0 0%\", \"#4169e1 100%\");\n  } else {\n    setBodyColor(\"#000000 0%\", \"royalblue 100%\");\n  }\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(console.log);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [\"return (\", /*#__PURE__*/_jsxDEV(Particles, {\n      id: \"tsparticles\",\n      init: particlesInit,\n      loaded: particlesLoaded,\n      options: {\n        fps_limit: 60,\n        interactivity: {\n          detect_on: \"canvas\",\n          events: {\n            onclick: {\n              enable: true,\n              mode: \"push\"\n            },\n            onhover: {\n              enable: true,\n              mode: \"attract\",\n              parallax: {\n                enable: false,\n                force: 60,\n                smooth: 10\n              }\n            },\n            resize: true\n          },\n          modes: {\n            push: {\n              quantity: 4\n            },\n            attract: {\n              distance: 200,\n              duration: 0.4,\n              factor: 5\n            }\n          }\n        },\n        particles: {\n          color: {\n            value: \"#ffffff\"\n          },\n          line_linked: {\n            color: \"#ffffff\",\n            distance: 150,\n            enable: true,\n            opacity: 0.4,\n            width: 1\n          },\n          move: {\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200\n            },\n            bounce: false,\n            direction: \"none\",\n            enable: true,\n            out_mode: \"out\",\n            random: false,\n            speed: 2,\n            straight: false\n          },\n          number: {\n            density: {\n              enable: true,\n              value_area: 800\n            },\n            value: 80\n          },\n          opacity: {\n            anim: {\n              enable: false,\n              opacity_min: 0.1,\n              speed: 1,\n              sync: false\n            },\n            random: false,\n            value: 0.5\n          },\n          shape: {\n            character: {\n              fill: false,\n              font: \"Verdana\",\n              style: \"\",\n              value: \"*\",\n              weight: \"400\"\n            },\n            image: {\n              height: 100,\n              replace_color: true,\n              src: \"images/github.svg\",\n              width: 100\n            },\n            polygon: {\n              nb_sides: 5\n            },\n            stroke: {\n              color: \"#000000\",\n              width: 0\n            },\n            type: \"circle\"\n          },\n          size: {\n            anim: {\n              enable: false,\n              size_min: 0.1,\n              speed: 40,\n              sync: false\n            },\n            random: true,\n            value: 5\n          }\n        },\n        polygon: {\n          draw: {\n            enable: false,\n            lineColor: \"#ffffff\",\n            lineWidth: 0.5\n          },\n          move: {\n            radius: 10\n          },\n          scale: 1,\n          type: \"none\",\n          url: \"\"\n        },\n        retina_detect: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 28\n    }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Search","CurrentWeather","Forecast","WEATHER_API_URL","WEATHER_API_KEY","setBodyColor","Particles","loadFull","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","currentTime","Date","getHours","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forcastResponse","city","label","catch","console","log","className","children","id","init","particlesInit","loaded","particlesLoaded","options","fps_limit","interactivity","detect_on","events","onclick","enable","mode","onhover","parallax","force","smooth","resize","modes","push","quantity","attract","distance","duration","factor","particles","color","line_linked","opacity","width","move","rotateX","rotateY","bounce","direction","out_mode","random","speed","straight","number","density","value_area","anim","opacity_min","sync","shape","character","fill","font","style","weight","image","height","replace_color","src","polygon","nb_sides","stroke","type","size","size_min","draw","lineColor","lineWidth","radius","scale","url","retina_detect","fileName","_jsxFileName","lineNumber","columnNumber","onSearchChange","data","_c","$RefreshReg$"],"sources":["/Users/swapnil/weather-app-swapnil/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor'\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\n//import sunrise from \"./sunrise.jpg\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  var currentTime = new Date().getHours();\n  \n  if (8 <= currentTime&&currentTime < 12) {\n   setBodyColor(\"#FF2CAA 0%\", \"#ffff01 100%\")\n  }\n  else if (12 <= currentTime&&currentTime < 19) {\n   setBodyColor(\"#89CFF0 0%\", \"#4169e1 100%\")\n  }\n  else {\n   setBodyColor(\"#000000 0%\", \"royalblue 100%\")\n  }\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch(console.log);\n  };\n\n  return (\n      <div className=\"container\">\n\n      return (\n        <Particles\n            id=\"tsparticles\"\n            init={particlesInit}\n            loaded={particlesLoaded}\n            options={{\n                fps_limit: 60,\n          interactivity: {\n            detect_on: \"canvas\",\n            events: {\n              onclick: { enable: true, mode: \"push\" },\n              onhover: {\n                enable: true,\n                mode: \"attract\",\n                parallax: { enable: false, force: 60, smooth: 10 }\n              },\n              resize: true\n            },\n            modes: {\n              push: { quantity: 4 },\n              attract: { distance: 200, duration: 0.4, factor: 5 }\n            }\n          },\n          particles: {\n            color: { value: \"#ffffff\" },\n            line_linked: {\n              color: \"#ffffff\",\n              distance: 150,\n              enable: true,\n              opacity: 0.4,\n              width: 1\n            },\n            move: {\n              attract: { enable: false, rotateX: 600, rotateY: 1200 },\n              bounce: false,\n              direction: \"none\",\n              enable: true,\n              out_mode: \"out\",\n              random: false,\n              speed: 2,\n              straight: false\n            },\n            number: { density: { enable: true, value_area: 800 }, value: 80 },\n            opacity: {\n              anim: { enable: false, opacity_min: 0.1, speed: 1, sync: false },\n              random: false,\n              value: 0.5\n            },\n            shape: {\n              character: {\n                fill: false,\n                font: \"Verdana\",\n                style: \"\",\n                value: \"*\",\n                weight: \"400\"\n              },\n              image: {\n                height: 100,\n                replace_color: true,\n                src: \"images/github.svg\",\n                width: 100\n              },\n              polygon: { nb_sides: 5 },\n              stroke: { color: \"#000000\", width: 0 },\n              type: \"circle\"\n            },\n            size: {\n              anim: { enable: false, size_min: 0.1, speed: 40, sync: false },\n              random: true,\n              value: 5\n            }\n          },\n          polygon: {\n            draw: { enable: false, lineColor: \"#ffffff\", lineWidth: 0.5 },\n            move: { radius: 10 },\n            scale: 1,\n            type: \"none\",\n            url: \"\"\n          },\n          retina_detect: true\n            }}\n        />\n\n        \n        <Search onSearchChange={handleOnSearchChange} />\n        {currentWeather && <CurrentWeather data={currentWeather} />}\n        {forecast && <Forecast data={forecast} />}\n      </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,cAAc,MAAM,8CAA8C;AACzE,OAAOC,QAAQ,MAAM,gCAAgC;AACrD,SAASC,eAAe,EAAEC,eAAe,QAAQ,OAAO;AACxD,OAAO,WAAW;AAClB,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,SAAS,MAAM,mBAAmB;AACzC,SAASC,QAAQ,QAAQ,aAAa;AACtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE9C,IAAIiB,WAAW,GAAG,IAAIC,IAAI,EAAE,CAACC,QAAQ,EAAE;EAEvC,IAAI,CAAC,IAAIF,WAAW,IAAEA,WAAW,GAAG,EAAE,EAAE;IACvCX,YAAY,CAAC,YAAY,EAAE,cAAc,CAAC;EAC3C,CAAC,MACI,IAAI,EAAE,IAAIW,WAAW,IAAEA,WAAW,GAAG,EAAE,EAAE;IAC7CX,YAAY,CAAC,YAAY,EAAE,cAAc,CAAC;EAC3C,CAAC,MACI;IACJA,YAAY,CAAC,YAAY,EAAE,gBAAgB,CAAC;EAC7C;EAEA,MAAMc,oBAAoB,GAAIC,UAAU,IAAK;IAC3C,MAAM,CAACC,GAAG,EAAEC,GAAG,CAAC,GAAGF,UAAU,CAACG,KAAK,CAACC,KAAK,CAAC,GAAG,CAAC;IAE9C,MAAMC,mBAAmB,GAAGC,KAAK,CAC9B,GAAEvB,eAAgB,gBAAekB,GAAI,QAAOC,GAAI,UAASlB,eAAgB,eAAc,CACzF;IACD,MAAMuB,aAAa,GAAGD,KAAK,CACxB,GAAEvB,eAAgB,iBAAgBkB,GAAI,QAAOC,GAAI,UAASlB,eAAgB,eAAc,CAC1F;IAEDwB,OAAO,CAACC,GAAG,CAAC,CAACJ,mBAAmB,EAAEE,aAAa,CAAC,CAAC,CAC9CG,IAAI,CAAC,MAAOC,QAAQ,IAAK;MACxB,MAAMC,eAAe,GAAG,MAAMD,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;MAChD,MAAMC,eAAe,GAAG,MAAMH,QAAQ,CAAC,CAAC,CAAC,CAACE,IAAI,EAAE;MAEhDpB,iBAAiB,CAAC;QAAEsB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGJ;MAAgB,CAAC,CAAC;MACjEjB,WAAW,CAAC;QAAEoB,IAAI,EAAEf,UAAU,CAACgB,KAAK;QAAE,GAAGF;MAAgB,CAAC,CAAC;IAC7D,CAAC,CAAC,CACDG,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC;EACvB,CAAC;EAED,oBACI9B,OAAA;IAAK+B,SAAS,EAAC,WAAW;IAAAC,QAAA,GAAC,UAGzB,eAAAhC,OAAA,CAACH,SAAS;MACNoC,EAAE,EAAC,aAAa;MAChBC,IAAI,EAAEC,aAAc;MACpBC,MAAM,EAAEC,eAAgB;MACxBC,OAAO,EAAE;QACLC,SAAS,EAAE,EAAE;QACnBC,aAAa,EAAE;UACbC,SAAS,EAAE,QAAQ;UACnBC,MAAM,EAAE;YACNC,OAAO,EAAE;cAAEC,MAAM,EAAE,IAAI;cAAEC,IAAI,EAAE;YAAO,CAAC;YACvCC,OAAO,EAAE;cACPF,MAAM,EAAE,IAAI;cACZC,IAAI,EAAE,SAAS;cACfE,QAAQ,EAAE;gBAAEH,MAAM,EAAE,KAAK;gBAAEI,KAAK,EAAE,EAAE;gBAAEC,MAAM,EAAE;cAAG;YACnD,CAAC;YACDC,MAAM,EAAE;UACV,CAAC;UACDC,KAAK,EAAE;YACLC,IAAI,EAAE;cAAEC,QAAQ,EAAE;YAAE,CAAC;YACrBC,OAAO,EAAE;cAAEC,QAAQ,EAAE,GAAG;cAAEC,QAAQ,EAAE,GAAG;cAAEC,MAAM,EAAE;YAAE;UACrD;QACF,CAAC;QACDC,SAAS,EAAE;UACTC,KAAK,EAAE;YAAE7C,KAAK,EAAE;UAAU,CAAC;UAC3B8C,WAAW,EAAE;YACXD,KAAK,EAAE,SAAS;YAChBJ,QAAQ,EAAE,GAAG;YACbX,MAAM,EAAE,IAAI;YACZiB,OAAO,EAAE,GAAG;YACZC,KAAK,EAAE;UACT,CAAC;UACDC,IAAI,EAAE;YACJT,OAAO,EAAE;cAAEV,MAAM,EAAE,KAAK;cAAEoB,OAAO,EAAE,GAAG;cAAEC,OAAO,EAAE;YAAK,CAAC;YACvDC,MAAM,EAAE,KAAK;YACbC,SAAS,EAAE,MAAM;YACjBvB,MAAM,EAAE,IAAI;YACZwB,QAAQ,EAAE,KAAK;YACfC,MAAM,EAAE,KAAK;YACbC,KAAK,EAAE,CAAC;YACRC,QAAQ,EAAE;UACZ,CAAC;UACDC,MAAM,EAAE;YAAEC,OAAO,EAAE;cAAE7B,MAAM,EAAE,IAAI;cAAE8B,UAAU,EAAE;YAAI,CAAC;YAAE5D,KAAK,EAAE;UAAG,CAAC;UACjE+C,OAAO,EAAE;YACPc,IAAI,EAAE;cAAE/B,MAAM,EAAE,KAAK;cAAEgC,WAAW,EAAE,GAAG;cAAEN,KAAK,EAAE,CAAC;cAAEO,IAAI,EAAE;YAAM,CAAC;YAChER,MAAM,EAAE,KAAK;YACbvD,KAAK,EAAE;UACT,CAAC;UACDgE,KAAK,EAAE;YACLC,SAAS,EAAE;cACTC,IAAI,EAAE,KAAK;cACXC,IAAI,EAAE,SAAS;cACfC,KAAK,EAAE,EAAE;cACTpE,KAAK,EAAE,GAAG;cACVqE,MAAM,EAAE;YACV,CAAC;YACDC,KAAK,EAAE;cACLC,MAAM,EAAE,GAAG;cACXC,aAAa,EAAE,IAAI;cACnBC,GAAG,EAAE,mBAAmB;cACxBzB,KAAK,EAAE;YACT,CAAC;YACD0B,OAAO,EAAE;cAAEC,QAAQ,EAAE;YAAE,CAAC;YACxBC,MAAM,EAAE;cAAE/B,KAAK,EAAE,SAAS;cAAEG,KAAK,EAAE;YAAE,CAAC;YACtC6B,IAAI,EAAE;UACR,CAAC;UACDC,IAAI,EAAE;YACJjB,IAAI,EAAE;cAAE/B,MAAM,EAAE,KAAK;cAAEiD,QAAQ,EAAE,GAAG;cAAEvB,KAAK,EAAE,EAAE;cAAEO,IAAI,EAAE;YAAM,CAAC;YAC9DR,MAAM,EAAE,IAAI;YACZvD,KAAK,EAAE;UACT;QACF,CAAC;QACD0E,OAAO,EAAE;UACPM,IAAI,EAAE;YAAElD,MAAM,EAAE,KAAK;YAAEmD,SAAS,EAAE,SAAS;YAAEC,SAAS,EAAE;UAAI,CAAC;UAC7DjC,IAAI,EAAE;YAAEkC,MAAM,EAAE;UAAG,CAAC;UACpBC,KAAK,EAAE,CAAC;UACRP,IAAI,EAAE,MAAM;UACZQ,GAAG,EAAE;QACP,CAAC;QACDC,aAAa,EAAE;MACb;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ,eAGFxG,OAAA,CAACT,MAAM;MAACkH,cAAc,EAAE/F;IAAqB;MAAA2F,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAC/CrG,cAAc,iBAAIH,OAAA,CAACR,cAAc;MAACkH,IAAI,EAAEvG;IAAe;MAAAkG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,EAC1DnG,QAAQ,iBAAIL,OAAA,CAACP,QAAQ;MAACiH,IAAI,EAAErG;IAAS;MAAAgG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACrC;AAEZ;AAACtG,EAAA,CAjIQD,GAAG;AAAA0G,EAAA,GAAH1G,GAAG;AAmIZ,eAAeA,GAAG;AAAC,IAAA0G,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}