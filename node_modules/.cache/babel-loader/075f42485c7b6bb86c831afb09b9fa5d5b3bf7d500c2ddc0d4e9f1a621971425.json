{"ast":null,"code":"var _jsxFileName = \"/Users/swapnil/weather-app-swapnil/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor';\n//import sunrise from \"./sunrise.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  var datetoday = new Date();\n  var timenow = datetoday.getTime();\n  currentTime = datetoday.getHours();\n  if (8 <= currentTime && currentTime < 12) {\n    setBodyColor({\n      color: \"45deg, #FF2CAA 0%, #ffff01 100%\"\n    });\n  } else if (12 <= currentTime && currentTime < 19) {\n    setBodyColor({\n      color: \"45deg, babyblue 0%, royalblue 100%\"\n    });\n  } else {\n    setBodyColor({\n      color: \"45deg, black 0%, royalblue 100\"\n    });\n  }\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(console.log);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Search, {\n      onSearchChange: handleOnSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      data: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 28\n    }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n      data: forecast\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Search","CurrentWeather","Forecast","WEATHER_API_URL","WEATHER_API_KEY","setBodyColor","jsxDEV","_jsxDEV","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","datetoday","Date","timenow","getTime","currentTime","getHours","color","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forcastResponse","city","label","catch","console","log","className","children","onSearchChange","fileName","_jsxFileName","lineNumber","columnNumber","data","_c","$RefreshReg$"],"sources":["/Users/swapnil/weather-app-swapnil/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor'\n//import sunrise from \"./sunrise.jpg\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  var datetoday = new Date();\n  var timenow = datetoday.getTime();\n\n  currentTime = datetoday.getHours();\n\n\n      if (8 <= currentTime&&currentTime < 12) {\n       setBodyColor({color: \"45deg, #FF2CAA 0%, #ffff01 100%\"})\n      }\n      else if (12 <= currentTime&&currentTime < 19) {\n       setBodyColor({color: \"45deg, babyblue 0%, royalblue 100%\"})\n      }\n      else {\n       setBodyColor({color: \"45deg, black 0%, royalblue 100\"})\n      }\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch(console.log);\n  };\n\n  return (\n      <div className=\"container\">\n        <Search onSearchChange={handleOnSearchChange} />\n        {currentWeather && <CurrentWeather data={currentWeather} />}\n        {forecast && <Forecast data={forecast} />}\n      </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}