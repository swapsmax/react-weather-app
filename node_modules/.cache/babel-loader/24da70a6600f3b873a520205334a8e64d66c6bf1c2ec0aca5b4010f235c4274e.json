{"ast":null,"code":"var _jsxFileName = \"/Users/swapnil/weather-app-swapnil/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor';\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport Particle from \",/components/Particle\";\n//import sunrise from \"./sunrise.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  var currentTime = new Date().getHours();\n  if (8 <= currentTime && currentTime < 12) {\n    setBodyColor(\"#FF2CAA 0%\", \"#ffff01 100%\");\n  } else if (12 <= currentTime && currentTime < 19) {\n    setBodyColor(\"#89CFF0 0%\", \"#4169e1 100%\");\n  } else {\n    setBodyColor(\"#000000 0%\", \"royalblue 100%\");\n  }\n  const handleOnSearchChange = searchData => {\n    const [lat, lon] = searchData.value.split(\" \");\n    const currentWeatherFetch = fetch(`${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    const forecastFetch = fetch(`${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`);\n    Promise.all([currentWeatherFetch, forecastFetch]).then(async response => {\n      const weatherResponse = await response[0].json();\n      const forcastResponse = await response[1].json();\n      setCurrentWeather({\n        city: searchData.label,\n        ...weatherResponse\n      });\n      setForecast({\n        city: searchData.label,\n        ...forcastResponse\n      });\n    }).catch(console.log);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Particle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [\"return (\", /*#__PURE__*/_jsxDEV(Search, {\n        onSearchChange: handleOnSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), currentWeather && /*#__PURE__*/_jsxDEV(CurrentWeather, {\n        data: currentWeather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 28\n      }, this), forecast && /*#__PURE__*/_jsxDEV(Forecast, {\n        data: forecast\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"WWp4biUQ6yxZ26omAvrL3l/oQ6o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Search","CurrentWeather","Forecast","WEATHER_API_URL","WEATHER_API_KEY","setBodyColor","Particles","loadFull","Particle","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentWeather","setCurrentWeather","forecast","setForecast","currentTime","Date","getHours","handleOnSearchChange","searchData","lat","lon","value","split","currentWeatherFetch","fetch","forecastFetch","Promise","all","then","response","weatherResponse","json","forcastResponse","city","label","catch","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSearchChange","data","_c","$RefreshReg$"],"sources":["/Users/swapnil/weather-app-swapnil/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport Search from \"./components/search/search\";\nimport CurrentWeather from \"./components/current-weather/current-weather\";\nimport Forecast from \"./components/forecast/forecast\";\nimport { WEATHER_API_URL, WEATHER_API_KEY } from \"./api\";\nimport \"./App.css\";\nimport setBodyColor from './setBodyColor'\nimport Particles from \"react-tsparticles\";\nimport { loadFull } from \"tsparticles\";\nimport Particle from \",/components/Particle\";\n//import sunrise from \"./sunrise.jpg\";\n\nfunction App() {\n  const [currentWeather, setCurrentWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n\n  var currentTime = new Date().getHours();\n  \n  if (8 <= currentTime&&currentTime < 12) {\n   setBodyColor(\"#FF2CAA 0%\", \"#ffff01 100%\")\n  }\n  else if (12 <= currentTime&&currentTime < 19) {\n   setBodyColor(\"#89CFF0 0%\", \"#4169e1 100%\")\n  }\n  else {\n   setBodyColor(\"#000000 0%\", \"royalblue 100%\")\n  }\n\n  const handleOnSearchChange = (searchData) => {\n    const [lat, lon] = searchData.value.split(\" \");\n\n    const currentWeatherFetch = fetch(\n      `${WEATHER_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n    const forecastFetch = fetch(\n      `${WEATHER_API_URL}/forecast?lat=${lat}&lon=${lon}&appid=${WEATHER_API_KEY}&units=metric`\n    );\n\n    Promise.all([currentWeatherFetch, forecastFetch])\n      .then(async (response) => {\n        const weatherResponse = await response[0].json();\n        const forcastResponse = await response[1].json();\n\n        setCurrentWeather({ city: searchData.label, ...weatherResponse });\n        setForecast({ city: searchData.label, ...forcastResponse });\n      })\n      .catch(console.log);\n  };\n\n  return (\n    <>\n      <Particle/>\n      <div className=\"container\">\n      return (\n        <Search onSearchChange={handleOnSearchChange} />\n        {currentWeather && <CurrentWeather data={currentWeather} />}\n        {forecast && <Forecast data={forecast} />}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}